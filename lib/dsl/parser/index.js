// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }
var grammar = {
    ParserRules: [
    {"name": "expr", "symbols": ["array"]},
    {"name": "expr", "symbols": ["object"]},
    {"name": "expr", "symbols": ["statement"]},
    {"name": "array$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "array$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "expr"]},
    {"name": "array$ebnf$1$subexpression$1$ebnf$1", "symbols": ["array$ebnf$1$subexpression$1$ebnf$1", "array$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "array$ebnf$1$subexpression$1", "symbols": ["expr", "array$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "array$ebnf$1", "symbols": ["array$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "array$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "array", "symbols": [{"literal":"["}, "_", "array$ebnf$1", "_", {"literal":"]"}]},
    {"name": "object$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "object$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "kvp"]},
    {"name": "object$ebnf$1$subexpression$1$ebnf$1", "symbols": ["object$ebnf$1$subexpression$1$ebnf$1", "object$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "object$ebnf$1$subexpression$1", "symbols": ["kvp", "object$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "object$ebnf$1", "symbols": ["object$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "object$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "object", "symbols": [{"literal":"{"}, "_", "object$ebnf$1", "_", {"literal":"}"}]},
    {"name": "kvp", "symbols": ["key", "_", {"literal":":"}, "_", "expr"]},
    {"name": "key$ebnf$1", "symbols": []},
    {"name": "key$ebnf$1", "symbols": ["key$ebnf$1", "printableAscii"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "key", "symbols": [{"literal":"\""}, "key$ebnf$1", {"literal":"\""}]},
    {"name": "statement$ebnf$1$subexpression$1", "symbols": ["mod"]},
    {"name": "statement$ebnf$1", "symbols": ["statement$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "statement$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "statement$subexpression$1", "symbols": ["boolean"]},
    {"name": "statement$subexpression$1", "symbols": ["date"]},
    {"name": "statement$subexpression$1", "symbols": ["number"]},
    {"name": "statement$subexpression$1", "symbols": ["string"]},
    {"name": "statement$ebnf$2$subexpression$1", "symbols": ["allow"]},
    {"name": "statement$ebnf$2", "symbols": ["statement$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "statement$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "statement", "symbols": [{"literal":"\""}, "statement$ebnf$1", "statement$subexpression$1", "statement$ebnf$2", {"literal":"\""}]},
    {"name": "mod", "symbols": [{"literal":"!"}]},
    {"name": "mod", "symbols": [{"literal":"?"}]},
    {"name": "boolean$string$1", "symbols": [{"literal":"b"}, {"literal":"o"}, {"literal":"o"}, {"literal":"l"}, {"literal":"e"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean$string$1"]},
    {"name": "date$string$1", "symbols": [{"literal":"d"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "date", "symbols": ["date$string$1"]},
    {"name": "date$string$2", "symbols": [{"literal":"d"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}, {"literal":"_"}, {"literal":"i"}, {"literal":"s"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "date", "symbols": ["date$string$2"]},
    {"name": "number$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "number", "symbols": ["number$string$1"]},
    {"name": "number$string$2", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "number", "symbols": ["number$string$2"]},
    {"name": "string$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "string", "symbols": ["string$string$1"]},
    {"name": "string$string$2", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}, {"literal":"_"}, {"literal":"e"}, {"literal":"m"}, {"literal":"a"}, {"literal":"i"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "string", "symbols": ["string$string$2"]},
    {"name": "string$string$3", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}, {"literal":"_"}, {"literal":"g"}, {"literal":"u"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "string", "symbols": ["string$string$3"]},
    {"name": "allow", "symbols": [{"literal":"("}, "allowTerm", {"literal":")"}]},
    {"name": "allowTerm$subexpression$1", "symbols": ["bool"]},
    {"name": "allowTerm$subexpression$1", "symbols": ["num"]},
    {"name": "allowTerm$subexpression$1", "symbols": ["str"]},
    {"name": "allowTerm$subexpression$1", "symbols": ["UNDEFINED"]},
    {"name": "allowTerm$subexpression$1", "symbols": ["NULL"]},
    {"name": "allowTerm$ebnf$1", "symbols": []},
    {"name": "allowTerm$ebnf$1$subexpression$1$subexpression$1", "symbols": ["bool"]},
    {"name": "allowTerm$ebnf$1$subexpression$1$subexpression$1", "symbols": ["num"]},
    {"name": "allowTerm$ebnf$1$subexpression$1$subexpression$1", "symbols": ["str"]},
    {"name": "allowTerm$ebnf$1$subexpression$1$subexpression$1", "symbols": ["UNDEFINED"]},
    {"name": "allowTerm$ebnf$1$subexpression$1$subexpression$1", "symbols": ["NULL"]},
    {"name": "allowTerm$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "allowTerm$ebnf$1$subexpression$1$subexpression$1"]},
    {"name": "allowTerm$ebnf$1", "symbols": ["allowTerm$ebnf$1", "allowTerm$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "allowTerm", "symbols": ["allowTerm$subexpression$1", "allowTerm$ebnf$1"]},
    {"name": "bool$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "bool", "symbols": ["bool$string$1"]},
    {"name": "bool$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "bool", "symbols": ["bool$string$2"]},
    {"name": "num$ebnf$1", "symbols": ["sign"], "postprocess": id},
    {"name": "num$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "num$subexpression$1", "symbols": ["int"]},
    {"name": "num$subexpression$1", "symbols": ["float"]},
    {"name": "num", "symbols": ["num$ebnf$1", "num$subexpression$1"]},
    {"name": "str$ebnf$1", "symbols": []},
    {"name": "str$ebnf$1$subexpression$1", "symbols": ["printableAscii"]},
    {"name": "str$ebnf$1$subexpression$1", "symbols": ["special"]},
    {"name": "str$ebnf$1", "symbols": ["str$ebnf$1", "str$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "str", "symbols": [{"literal":"'"}, "str$ebnf$1", {"literal":"'"}]},
    {"name": "NULL$string$1", "symbols": [{"literal":"N"}, {"literal":"U"}, {"literal":"L"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "NULL", "symbols": ["NULL$string$1"]},
    {"name": "UNDEFINED$string$1", "symbols": [{"literal":"U"}, {"literal":"N"}, {"literal":"D"}, {"literal":"E"}, {"literal":"F"}, {"literal":"I"}, {"literal":"N"}, {"literal":"E"}, {"literal":"D"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "UNDEFINED", "symbols": ["UNDEFINED$string$1"]},
    {"name": "sign", "symbols": [{"literal":"+"}]},
    {"name": "sign", "symbols": [{"literal":"-"}]},
    {"name": "int", "symbols": [/[0-9]/]},
    {"name": "int$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "int$subexpression$1$ebnf$1", "symbols": ["int$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "int$subexpression$1", "symbols": [/[1-9]/, "int$subexpression$1$ebnf$1"]},
    {"name": "int", "symbols": ["int$subexpression$1"]},
    {"name": "float", "symbols": ["int", {"literal":"."}, "int"]},
    {"name": "printableAscii", "symbols": [/[\x20-\x7e]/]},
    {"name": "special", "symbols": [/[\x09\x0a\x0d]/]},
    {"name": "_$ebnf$1", "symbols": [/[\x09\x20]/], "postprocess": id},
    {"name": "_$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_", "symbols": ["_$ebnf$1"]}
]
  , ParserStart: "expr"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
